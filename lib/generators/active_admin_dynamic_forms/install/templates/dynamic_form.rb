# This file was generated by the active_admin_dynamic_forms:install generator.
# You can customize it to your needs.

ActiveAdmin.register ActiveAdminDynamicForms::Models::DynamicForm, as: 'Form' do
  menu label: 'Dynamic Forms', priority: 100
  
  permit_params :name, :description, :model_class,
                fields_attributes: [:id, :label, :field_type, :placeholder, :required, :position, :_destroy,
                                   options_attributes: [:id, :label, :value, :position, :_destroy]],
                model_associations_attributes: [:id, :model_class, :associated_record_id, :_destroy]
  
  index do
    selectable_column
    id_column
    column :name
    column :description
    column 'Model Classes' do |form|
      if form.model_associations.any?
        form.model_associations.pluck(:model_class).uniq.join(', ')
      else
        form.model_class
      end
    end
    column :created_at
    column :updated_at
    column 'Fields' do |form|
      form.fields.count
    end
    actions
  end
  
  show do
    attributes_table do
      row :id
      row :name
      row :description
      if resource.model_associations.any?
        row 'Model Classes' do
          ul do
            resource.model_associations.group_by(&:model_class).each do |model_class, associations|
              li do
                div b model_class
                ul do
                  if associations.any? { |a| a.associated_record_id.present? }
                    associations.select { |a| a.associated_record_id.present? }.each do |association|
                      li "Record ID: #{association.associated_record_id}"
                    end
                  else
                    li "All records"
                  end
                end
              end
            end
          end
        end
      else
        row :model_class
      end
      row :created_at
      row :updated_at
    end
    
    panel 'Fields' do
      table_for resource.fields.order(:position) do
        column :position
        column :label
        column :field_type do |field|
          ActiveAdminDynamicForms::Models::DynamicFormField::FIELD_TYPES[field.field_type]
        end
        column :required
        column :placeholder
        column 'Options' do |field|
          if field.has_options?
            ul do
              field.options.order(:position).each do |option|
                li "#{option.label} (#{option.value})"
              end
            end
          else
            span 'N/A'
          end
        end
      end
    end
  end
  
  form do |f|
    f.inputs 'Form Details' do
      f.input :name
      f.input :description
      
      # Get all models that have included has_dynamic_form
      available_models = ActiveAdminDynamicForms::HasDynamicFormMethod.model_names
      
      # Create a select input for legacy model_class for backward compatibility
      f.input :model_class, as: :select, 
              collection: available_models,
              include_blank: "Select a primary model (optional if associations defined below)",
              hint: 'Select the primary model this form will be associated with (for backward compatibility)'
    end
    
    f.inputs 'Model Associations' do
      f.has_many :model_associations, allow_destroy: true, new_record: 'Add Model Association' do |association|
        association.input :model_class, as: :select, 
                         collection: available_models,
                         include_blank: false,
                         hint: 'Select the model this form should be associated with'
        association.input :associated_record_id, 
                         hint: 'Optional: Specify a record ID to limit this form to a specific record. Leave blank to apply to all records of this model type.'
      end
    end
    
    f.inputs 'Fields' do
      f.has_many :fields, sortable: :position, sortable_start: 1, allow_destroy: true, new_record: true do |field|
        field.input :label
        field.input :field_type, as: :select, collection: ActiveAdminDynamicForms::Models::DynamicFormField.field_type_options
        field.input :placeholder
        field.input :required
        field.input :position, as: :hidden
        
        # Only show options for field types that support them
        field.has_many :options, sortable: :position, sortable_start: 1, allow_destroy: true, new_record: true,
                      heading: 'Options (for Select, Radio, and Checkbox fields only)' do |option|
          option.input :label
          option.input :value
          option.input :position, as: :hidden
        end
      end
    end
    
    f.actions
  end
  
  controller do
    def find_resource
      ActiveAdminDynamicForms::Models::DynamicForm.find(params[:id])
    end
  end
end 